----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 12/19/2023 02:43:23 PM
-- Design Name: 
-- Module Name: WR_RD_CREATE - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity WR_RD_CREATE is
port (	
  ARINC_818_Rx_VSYNC_RST         : in std_logic;  
  user_clk         : in std_logic;  
  user_reset       : in std_logic; 
  lwr              : out std_logic;  
  lrd              : out std_logic;  
  laddr	           : out std_logic_vector(31 downto 0);
  lwr_data         : out std_logic_vector(31 downto 0);
  lrd_data         : in std_logic_vector(31 downto 0);

  s_axis_tx_tdata  : out std_logic_vector(63 downto 0);
  s_axis_tx_tlast  : out std_logic;
  s_axis_tx_tvalid : out std_logic;
  s_axis_tx_tkeep  : out std_logic_vector(7 downto 0);
  s_axis_tx_tready : in std_logic;			

  m_axis_rx_tdata  : in std_logic_vector(63 downto 0);
  m_axis_rx_tvalid : in std_logic;
  m_axis_rx_tlast  : in std_logic;
  
  ---DMA
  DMA_RST                : out std_logic; 
  dma_cnt_sel                : out std_logic_vector(31 downto 0); 
  current_descriptor2                : out std_logic_vector(2 downto 0); 
  DMA_RD_EN              :  out std_logic;
  DMA_FIFO_OUT           :  in std_logic_vector(255 downto 0);
  DMA_FIFO_RD_COUNT      : in  std_logic_vector(10 downto 0)  	
);
end  WR_RD_CREATE;

architecture behavioral of  WR_RD_CREATE is


signal rd_data_count     : std_logic_vector(10 downto 0);
signal des_addr_1        : std_logic_vector(31 downto 0);
signal des_addr_2        : std_logic_vector(31 downto 0);
signal des_addr_3        : std_logic_vector(31 downto 0);
signal des_addr_4        : std_logic_vector(31 downto 0);
signal des_addr_5        : std_logic_vector(31 downto 0);
signal des_addr_6        : std_logic_vector(31 downto 0);
signal des_addr_7        : std_logic_vector(31 downto 0);
signal des_addr_8        : std_logic_vector(31 downto 0);
signal des_addr_9        : std_logic_vector(31 downto 0);
signal des_addr_10       : std_logic_vector(31 downto 0);
signal des_addr_11       : std_logic_vector(31 downto 0);
signal des_addr_12       : std_logic_vector(31 downto 0);
signal des_addr_13       : std_logic_vector(31 downto 0);
signal des_addr_14       : std_logic_vector(31 downto 0);
signal des_addr_15       : std_logic_vector(31 downto 0);
signal des_addr_16       : std_logic_vector(31 downto 0);
signal pci_addr       : std_logic_vector(31 downto 0);

signal des_data_size     : std_logic_vector(31 downto 0);

signal dma_ragister_read : std_logic_vector(31 downto 0);
signal data_fifo_cnt : std_logic_vector(8 downto 0);
signal No_of_Des_cnt : std_logic_vector(1 downto 0);

signal s_axis_tx_tuser   : std_logic_vector(32 downto 0);
signal latch_data        : std_logic_vector(31 downto 0);
signal latch_data1        : std_logic_vector(383 downto 0);
signal laddr1            : std_logic_vector(31 downto 0);
signal s_axis_tx_tkeep1  : std_logic_vector(7 downto 0);
signal m_axis_rx_tdata_1 : std_logic_vector(63 downto 0);
signal m_axis_rx_tdata_2 : std_logic_vector(63 downto 0);
signal m_axis_rx_tdata_3 : std_logic_vector(63 downto 0);
signal m_axis_rx_tdata_int_lat : std_logic_vector(63 downto 0);
signal m_axis_rx_tdata_int_lat2 : std_logic_vector(63 downto 0);
signal m_axis_rx_tlast_1 : std_logic;
signal lwr_1  		     : std_logic;
signal lwr_2  			 : std_logic;
signal lwr_3  			 : std_logic;
signal lwr_4  			 : std_logic;
signal lwr_5  			 : std_logic;
signal lwr_6  			 : std_logic;
signal lwr_7  			 : std_logic;
signal lwr_8  			 : std_logic;
signal lwr_9  			 : std_logic;
signal lwr_10            : std_logic;
signal lrd_1             : std_logic;
signal lrd_2             : std_logic;
signal lrd_3             : std_logic;
signal lrd_4             : std_logic;
signal lrd_5             : std_logic;
signal lrd_6             : std_logic;
signal lrd_7             : std_logic;
signal lrd_8             : std_logic;
signal lrd_9             : std_logic;
signal lrd_10            : std_logic;
signal ARINC_818_Rx_VSYNC_RST1            : std_logic;
signal ARINC_818_Rx_VSYNC_RST2            : std_logic;
signal ARINC_818_Rx_VSYNC_RST3            : std_logic;
signal ARINC_818_Rx_VSYNC_RST4            : std_logic;
signal ARINC_818_Rx_VSYNC_RST5            : std_logic;
signal ARINC_818_Rx_VSYNC_RST6            : std_logic;
signal ARINC_818_Rx_VSYNC_RST7            : std_logic;
signal ARINC_818_Rx_VSYNC_RST8            : std_logic;
signal ARINC_818_Rx_VSYNC_RST9            : std_logic;
signal ARINC_818_Rx_VSYNC_RST10            : std_logic;

--type state_type is ( idle,st1,st2,st3,st4,st5,st6,st7,st8,st9,st10,st11,st12);
type state_type is ( idle,st1,st2,st3,st4,st5,st6,st7,st8);
signal nextstate : state_type;

type state_type1 is ( idle1,state1,state2 );
signal nextstate1 : state_type1;
signal wait_cnt        : std_logic_vector(4 downto 0);

signal counter_data            : std_logic_vector(255 downto 0);
signal lwr_data_int            : std_logic_vector(31 downto 0);
signal lwr_data_int1            : std_logic_vector(31 downto 0);
signal ff_din                  : std_logic_vector(72 downto 0);
signal ff_dout                 : std_logic_vector(72 downto 0);
signal s_axis_rq_tuser1        : std_logic_vector(59 downto 0);
signal temp_disable            :std_logic;
signal ff_empty                :std_logic;
signal compl_req,compl_req_clr :std_logic;
signal ff_empty_n              :std_logic;
signal ff_rd_en                :std_logic;
signal s_axis_tx_tlast1        : std_logic;
signal s_axis_tx_tvalid1       : std_logic;
signal s_axis_tx_tuser1        : std_logic_vector(32 downto 0);
signal s_axis_tx_tdata1        : std_logic_vector(63 downto 0);
signal des_addr_latch          : std_logic_vector(31 downto 0);
signal data_cnt                : std_logic_vector(31 downto 0);
signal inc_by_4                : std_logic;

component pgen_vhdl
port(
	din  : in std_logic;
	clk  : in std_logic;          
	dout : out std_logic
	);
end component;

COMPONENT DMA_DATA
  PORT (
    clk : IN STD_LOGIC;
    srst : IN STD_LOGIC;
    din : IN STD_LOGIC_VECTOR(72 DOWNTO 0);
    wr_en : IN STD_LOGIC;
    rd_en : IN STD_LOGIC;
    dout : OUT STD_LOGIC_VECTOR(72 DOWNTO 0);
    full : OUT STD_LOGIC;
    empty : OUT STD_LOGIC
  );
END COMPONENT;

COMPONENT GPU_FPGA_DMA
  PORT (
    rst : IN STD_LOGIC;
    wr_clk : IN STD_LOGIC;
    rd_clk : IN STD_LOGIC;
    din : IN STD_LOGIC_VECTOR(255 DOWNTO 0);
    wr_en : IN STD_LOGIC;
    rd_en : IN STD_LOGIC;
    dout : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    full : OUT STD_LOGIC;
    empty : OUT STD_LOGIC;
    wr_rst_busy : OUT STD_LOGIC;
    rd_rst_busy : OUT STD_LOGIC
  );
END COMPONENT;

COMPONENT dma_rd_req_fifo
  PORT (
    rst : IN STD_LOGIC;
    wr_clk : IN STD_LOGIC;
    rd_clk : IN STD_LOGIC;
    din : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    wr_en : IN STD_LOGIC;
    rd_en : IN STD_LOGIC;
    dout : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    full : OUT STD_LOGIC;
    empty : OUT STD_LOGIC;
    rd_data_count : OUT STD_LOGIC_VECTOR(10 DOWNTO 0);
    wr_rst_busy : OUT STD_LOGIC;
    rd_rst_busy : OUT STD_LOGIC
  );
END COMPONENT;


type state_type2 is (idle,addr_check_st,count_check_st );
signal n_s :state_type2;
signal current_descriptor : std_logic_vector(1 downto 0);
signal trans_en,TRANS_EN_lat           : std_logic;							
signal rst_in             : std_logic;							
signal trans_en_n         : std_logic;							
signal lwr_int            : std_logic;							
signal lrd_int            : std_logic;							
signal cnt_ff_wrr            : std_logic;							
signal dma_busy           : std_logic;							
signal des_addr           : std_logic_vector(31 downto 0);			

signal dma_speed_sel 	  : std_logic_vector(7 downto 0);
--signal dma_cnt_sel 		  : std_logic_vector(7 downto 0);
signal ff_almost_full 	  : std_logic;
signal cbt 				  : std_logic_vector(7 downto 0);
signal data_cnt1 				  : std_logic_vector(31 downto 0);
signal DMA_FIFO_IN 				  : std_logic_vector(255 downto 0);
signal DMA_FIFO_IN1 				  : std_logic_vector(127 downto 0);
signal DMA_FIFO_IN2 				  : std_logic_vector(127 downto 0);
signal DMA_FIFO_IN3 				  : std_logic_vector(255 downto 0);
signal TRANS_EN5 : std_logic;
signal TRANS_EN1,TRANS_EN2,TRANS_EN3,TRANS_EN4 : std_logic;
 signal dma_rd_addr_latch     : std_logic_vector(31 downto 0);
 signal addr_count     : std_logic_vector(31 downto 0);
 signal delay_count     : std_logic_vector(7 downto 0);
 
 signal dma_rd_addr_wr_pul : std_logic;
signal dma_rd_addr_rd : std_logic;
signal read_req_empty : std_logic;
signal dma_rd_addr_out : std_logic_vector(31 downto 0);
signal read_req_addr_cnt : std_logic_vector(10 downto 0);
signal rd_data_wr        : std_logic;
signal rd_data_wr_b1,read_req_full,fifo_rden_out ,DMA_RD_EN1     : std_logic;
signal rd_data_wr_b2,fifo_rd_dma,read_ff_empty,dma_rd_addr_wr      : std_logic;
signal fifo_wr_data   : std_logic_vector(255 downto 0);
signal dma_rd_addr_in   : std_logic_vector(31 downto 0);
signal fifo_data_out_b   : std_logic_vector(31 downto 0);
signal fifo_data_out   : std_logic_vector(31 downto 0);
signal current_descriptor1   : std_logic_vector(2 downto 0);
--signal current_descriptor2   : std_logic_vector(1 downto 0);

 COMPONENT DMA_REQ_FIFO
  PORT (
    rst : IN STD_LOGIC;
    wr_clk : IN STD_LOGIC;
    rd_clk : IN STD_LOGIC;
    din : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    wr_en : IN STD_LOGIC;
    rd_en : IN STD_LOGIC;
    dout : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    full : OUT STD_LOGIC;
    empty : OUT STD_LOGIC;
    wr_rst_busy : OUT STD_LOGIC;
    rd_rst_busy : OUT STD_LOGIC;
    rd_data_count : OUT STD_LOGIC_VECTOR(10 DOWNTO 0)
  );
END COMPONENT;
 


attribute mark_debug : string;
attribute mark_debug of laddr,m_axis_rx_tlast_1,m_axis_rx_tdata_2,nextstate1,des_addr_1,dma_cnt_sel,TRANS_EN1,data_cnt1,data_cnt,
          latch_data,LRD_9,s_axis_tx_tdata1,s_axis_tx_tvalid1,ff_din,ff_dout,m_axis_rx_tdata_1,m_axis_rx_tvalid,LADDR1,LWR_DATA_int,LRD_10,LRD_8,
                      LWR_1,s_axis_tx_tlast1,s_axis_tx_tkeep1,nextstate,m_axis_rx_tdata,compl_req,m_axis_rx_tdata_int_lat,
                      TRANS_EN5,TRANS_EN,TRANS_EN_lat,des_data_size,DES_ADDR,counter_data,TRANS_EN4,current_descriptor,pci_addr,
                      fifo_data_out_b,fifo_wr_data,rd_data_wr_b2,read_ff_empty,n_s,read_req_empty,dma_rd_addr_rd,
                      dma_rd_addr_latch,addr_count,dma_rd_addr_wr_pul,dma_rd_addr_out,read_req_addr_cnt,
                      DMA_RD_EN1,DMA_FIFO_IN1,DMA_FIFO_IN2,DMA_FIFO_RD_COUNT: signal is "true";
                     
begin

laddr <= laddr1;
DMA_RD_EN<=DMA_RD_EN1;
process(user_clk)
begin
if (rising_edge(user_clk)) then
		m_axis_rx_tlast_1 <= m_axis_rx_tlast;
	if (m_axis_rx_tvalid = '1') then	
		m_axis_rx_tdata_1 <= m_axis_rx_tdata;
		m_axis_rx_tdata_2 <= m_axis_rx_tdata_1;
		m_axis_rx_tdata_3 <= m_axis_rx_tdata_2;
	end if;
end if;
end process;



process(user_clk)
begin
if (rising_edge(user_clk)) then		
if (DMA_RD_EN1 = '1') then	
    DMA_FIFO_IN <= DMA_FIFO_OUT;
end if;
end if;
end process;





LWR_DATA <= LWR_DATA_int(7 downto 0)& LWR_DATA_int(15 downto 8) & LWR_DATA_int(23 downto 16)& LWR_DATA_int(31 downto 24) ;
LWR_DATA_int1 <= LWR_DATA_int(7 downto 0)& LWR_DATA_int(15 downto 8) & LWR_DATA_int(23 downto 16)& LWR_DATA_int(31 downto 24) ;


process( user_clk)
begin
	if (rising_edge(user_clk)) then
			if (user_reset = '1') then
					lwr_1 		 <= '0';
					lrd_1 		 <= '0';
					lwr_data_int <= (others => '0');
					laddr1		 <= (others => '0');
			elsif (m_axis_rx_tlast_1 = '1') then
				if ( m_axis_rx_tdata_2(35 downto 0) = x"f40000001") then
					lwr_1 		 <= '1';
					lwr_data_int <= m_axis_rx_tdata_1(63 downto 32);
					laddr1 		 <= m_axis_rx_tdata_1(31 downto 0);
				elsif ( m_axis_rx_tdata_2(35 downto 0) = x"f00000001") then
					lrd_1 		 <= '1';
					lwr_data_int <= (others => '0');
					laddr1 		 <=  m_axis_rx_tdata_1(31 downto 0);
					m_axis_rx_tdata_int_lat 		 <=  m_axis_rx_tdata_2;					
				end if;
			else
				lwr_1 <= '0';				
				lrd_1 <= '0';				
			end if;
	end if;
end process;	
			
process( user_clk)
begin
	if (rising_edge(user_clk)) then
		lwr_2 <= lwr_1;
		lwr_3 <= lwr_2;
		lwr_4 <= lwr_3;
		lwr_5 <= lwr_4;
		lwr_6 <= lwr_5;
		lwr_7 <= lwr_6;
		lwr_8 <= lwr_7;
		lwr_9 <= lwr_8;
		lwr_10 <= lwr_9;
		lrd_2 <= lrd_1;
		lrd_3 <= lrd_2;
		lrd_4 <= lrd_3;
		lrd_5 <= lrd_4;
		lrd_6 <= lrd_5;
		lrd_7 <= lrd_6;
		lrd_8 <= lrd_7;
		lrd_9 <= lrd_8;
		lrd_10 <= lrd_9;
		lwr_int    <= lwr_1 or lwr_2 or lwr_3 or lwr_4 or lwr_5 or lwr_6 or lwr_7 or lwr_8 or lwr_9 or lwr_10;
		lrd_int    <= lrd_1 or lrd_2 or lrd_3 or lrd_4 or lrd_5 or lrd_6 or lrd_7 or lrd_8 or lrd_9 or lrd_10;
	end if;
end process;

lwr <= lwr_int;
lrd <= lrd_int;

process( user_clk)
begin
if (rising_edge(user_clk)) then
	if (lrd_9 ='1') then
       latch_data 	<= lrd_data;
	end if;
end if;
end process;
		
			
process( user_clk)
begin
	if (rising_edge(user_clk)) then
		if (compl_req_clr = '1') then
			compl_req   <= '0';
		 elsif (lrd_9 ='1') then
			compl_req   <= '1';
		end if;
	end if;
end process;

process( user_clk,user_reset )
  begin
   if ( user_reset = '1' ) then		
		nextstate 	                   <= idle;
		s_axis_tx_tdata1  			 <= (others => '0') ; 	
		s_axis_tx_tuser1  			 <= (others => '0') ; 	
		s_axis_tx_tlast1  			 <= '0' ; 	
		s_axis_tx_tvalid1  		     <= '0' ; 
		DMA_RD_EN1<='0';		
   elsif (user_clk' event and user_clk = '1') then
	
   case nextstate is			  
					
   when idle =>
	
					s_axis_tx_tdata1  			<= (others => '0') ; 	
					s_axis_tx_tuser1  			<= (others => '0') ; 	
					s_axis_tx_tlast1  			<= '0' ; 	
					s_axis_tx_tvalid1  			<= '0' ; 			
					s_axis_tx_tkeep1    			<= x"ff";	
					


					 if( compl_req ='1' and ff_empty = '1' ) then
						nextstate 		<= st1;
						compl_req_clr 	<= '1';
						DMA_RD_EN1      <='0'; 
					 elsif (TRANS_EN5 = '1' and ff_empty = '1' and   DMA_FIFO_RD_COUNT > 0 and ARINC_818_Rx_VSYNC_RST10 = '0')  then	
					     nextstate 	    <= st3;
					     DMA_RD_EN1     <='1';
					 else
                         nextstate 	    <= idle;  
                         DMA_RD_EN1     <='0'; 
					 end if ;					
						
	 when st1 => 
						compl_req_clr 	            <= '0';
						s_axis_tx_tdata1 			<= x"040000044a000001";
						s_axis_tx_tvalid1  		    <= '1' ; 
						s_axis_tx_tkeep1    		<= x"ff";						
						nextstate 					<= st2;						
						
			
	 when st2 => 
						s_axis_tx_tdata1 		<= latch_data(7 downto 0)&latch_data(15 downto 8)&latch_data(23 downto 16)&latch_data(31 downto 24) & x"0000"& m_axis_rx_tdata_int_lat(47 downto 40) & laddr1(7 downto 0);
						s_axis_tx_tvalid1  		<= '1' ; 
						s_axis_tx_tlast1  		<= '1' ;                        
						s_axis_tx_tkeep1        <= x"ff";						
                        nextstate 	      		<= idle;
                        
      when st3 => 
						s_axis_tx_tdata1 		<= x"040000FF40000008";
						s_axis_tx_tvalid1  		<= '1' ; 
						s_axis_tx_tlast1  		<= '0' ;
						DMA_RD_EN1              <='0';                        
 						s_axis_tx_tkeep1    	<= x"FF";						
                        nextstate 	      		<= st4;	
						
	 when st4 => 
						s_axis_tx_tdata1 		<= DMA_FIFO_IN(255 downto 224) & des_addr_latch;
						s_axis_tx_tvalid1  		<= '1' ; 
						s_axis_tx_tlast1  		<= '0' ;                        
 						s_axis_tx_tkeep1        <= x"FF";						
						nextstate 	      		<= st5;	
						inc_by_4   <= '1';
						DMA_RD_EN1<='0';
	 when st5 => 
						s_axis_tx_tdata1 	    <= DMA_FIFO_IN(191 downto 160) & DMA_FIFO_IN(223 downto 192) ;
						s_axis_tx_tvalid1  		<= '1' ; 
						s_axis_tx_tlast1  		<= '0' ;                        
 						s_axis_tx_tkeep1    	<= x"FF";						
                        nextstate 	      		<= st6;	
						inc_by_4   <= '0';
						
	 when st6 => 
                        s_axis_tx_tdata1 			<= DMA_FIFO_IN(127 downto 96) & DMA_FIFO_IN(159 downto 128) ;
						s_axis_tx_tvalid1  		<= '1' ; 
						s_axis_tx_tlast1  		<= '0' ;                        
 						s_axis_tx_tkeep1    		<= x"FF";						
                        nextstate 	      		<= st7;	
						
	 when st7 => 
						s_axis_tx_tdata1 			<= DMA_FIFO_IN(63 downto 32) & DMA_FIFO_IN(95 downto 64) ;
						s_axis_tx_tvalid1  		<= '1' ; 
						s_axis_tx_tlast1  		<= '0' ;                        
 						s_axis_tx_tkeep1    		<= x"FF";						
                  nextstate 	      		<= st8;	
						
	 when st8 => 
						s_axis_tx_tdata1 		<= x"00000000" & DMA_FIFO_IN(31 downto 0) ;
						s_axis_tx_tvalid1  		<= '1' ; 
						s_axis_tx_tlast1  		<= '1' ;                        
 						s_axis_tx_tkeep1    	<= x"0F";						
                         nextstate 	      		<= idle;	
				
     end case ;
end if;
end process;		


 ff_din <= s_axis_tx_tlast1 &  s_axis_tx_tkeep1 & s_axis_tx_tdata1;        
        s_axis_tx_tdata             <= ff_dout(63 downto 0);
        s_axis_tx_tkeep(0) 			<= ff_dout(64) or ff_empty;
        s_axis_tx_tkeep(1) 			<= ff_dout(65) or ff_empty;
        s_axis_tx_tkeep(2) 			<= ff_dout(66) or ff_empty;
        s_axis_tx_tkeep(3) 			<= ff_dout(67) or ff_empty;
        s_axis_tx_tkeep(4) 			<= ff_dout(68) or ff_empty;
        s_axis_tx_tkeep(5) 			<= ff_dout(69) or ff_empty;
        s_axis_tx_tkeep(6) 			<= ff_dout(70) or ff_empty;
        s_axis_tx_tkeep(7) 			<= ff_dout(71) or ff_empty;
        s_axis_tx_tlast             <= ff_dout(72) and ff_empty_n;
        s_axis_tx_tvalid            <= ff_empty_n;  


----------------------DMA FSM------------------------

process( user_clk)
begin
	if (rising_edge(user_clk)) then
		if (user_reset = '1')  then
			des_data_size  <= x"00000080";
		elsif (LADDR1(23 downto 0) = x"200500" and LWR_int = '1') then
			des_data_size  <= lwr_data_int1;
		end if;
	end if;
end process;


process( user_clk)
begin
if (rising_edge(user_clk)) then
  if (user_reset = '1' )  then
        TRANS_EN1  <= '0';
  elsif (LADDR1(23 downto 0) = x"200504" and LWR_int = '1') then
	    TRANS_EN1  <= lwr_data_int1(0);
end if;
end if;
end process;



U6_PUL_GEN3 : entity work.pulse_gen
    PORT MAP(
    Clk   => user_clk,
    Din   =>  TRANS_EN1,
    dout  => TRANS_EN2
    );

process( user_clk)
begin
if (rising_edge(user_clk)) then
	TRANS_EN3<=TRANS_EN2;
	TRANS_EN4<=TRANS_EN3;
end if;

end process;

TRANS_EN <=TRANS_EN3 or TRANS_EN4;


process( user_clk)
begin
	if (rising_edge(user_clk)) then
		if (user_reset = '1')  then
			data_fifo_cnt  <= (others=>'0');
		elsif (LADDR1(23 downto 0) = x"200510" and LWR_int = '1') then
			data_fifo_cnt  <= lwr_data_int1(8 downto 0) ;
		
		end if;
	end if;
end process;


process( user_clk)
begin
	if (rising_edge(user_clk)) then
		if (user_reset = '1')  then
			No_of_Des_cnt  <= "01";
		elsif (LADDR1(23 downto 0) = x"200514" and LWR_int = '1') then
			No_of_Des_cnt  <= lwr_data_int1(1 downto 0);
		end if;
	end if;
end process;

process( user_clk)
begin
	if (rising_edge(user_clk)) then
		if (user_reset = '1')  then
			dma_cnt_sel  <= x"00000000";
		elsif (LADDR1(23 downto 0) = x"200518" and LWR_int = '1') then
			dma_cnt_sel  <= lwr_data_int1(31 downto 0);
		end if;
	end if;
end process;

process( user_clk)
begin
	if (rising_edge(user_clk)) then
		if (user_reset = '1')  then
			dma_rd_addr_in  <= x"00000000";
			dma_rd_addr_wr<='0';
		elsif (LADDR1(23 downto 0) = x"20051C" and LWR_int = '1') then
			dma_rd_addr_in  <= lwr_data_int1(31 downto 0);
			dma_rd_addr_wr<='1';
	     else   
	         dma_rd_addr_wr<='0';
		end if;
	end if;
end process;




process( user_clk)
begin
	if (rising_edge(user_clk)) then
		if (user_reset = '1')  then
			data_cnt1  <= x"00000000";
		elsif (LADDR1(23 downto 0) = x"200520" and LWR_int = '1') then
			data_cnt1  <= lwr_data_int1(31 downto 0);
		end if;
	end if;
end process;

process( user_clk)
begin
	if (rising_edge(user_clk)) then
		if (user_reset = '1')  then
			pci_addr  <= x"00000000";
		elsif (LADDR1(23 downto 0) = x"200524" and LWR_int = '1') then
			pci_addr  <= lwr_data_int1(31 downto 0);
		end if;
	end if;
end process;


DES_ADDR   <= 	    des_addr_1  when current_descriptor = "00" else 
					des_addr_2  when current_descriptor = "01" else 
					des_addr_3  when current_descriptor = "10" else 
					des_addr_4  when current_descriptor = "11" else 
					x"00000000";
		
dma_ragister_read <= 	x"0000000" & "00"&current_descriptor 	when (LADDR1 = x"2000050C" and LRD_int = '1') else
    					x"0000000" & "000" & DMA_BUSY 	when (LADDR1 = x"20000508" and LRD_int = '1') else
	       				x"00000000";
								
				


process( user_clk,user_reset )
 begin
    if (rising_edge(user_clk)) then
        ARINC_818_Rx_VSYNC_RST1 <= ARINC_818_Rx_VSYNC_RST;
        ARINC_818_Rx_VSYNC_RST2 <= ARINC_818_Rx_VSYNC_RST1;
        ARINC_818_Rx_VSYNC_RST3 <= ARINC_818_Rx_VSYNC_RST2;
        ARINC_818_Rx_VSYNC_RST4 <= ARINC_818_Rx_VSYNC_RST3;
        ARINC_818_Rx_VSYNC_RST5 <= ARINC_818_Rx_VSYNC_RST4;
        ARINC_818_Rx_VSYNC_RST6 <= ARINC_818_Rx_VSYNC_RST5;
        ARINC_818_Rx_VSYNC_RST7 <= ARINC_818_Rx_VSYNC_RST6;
        ARINC_818_Rx_VSYNC_RST8 <= ARINC_818_Rx_VSYNC_RST7;
        ARINC_818_Rx_VSYNC_RST9 <= ARINC_818_Rx_VSYNC_RST8;
        ARINC_818_Rx_VSYNC_RST10 <= 
                                       ARINC_818_Rx_VSYNC_RST9 or 
                                       ARINC_818_Rx_VSYNC_RST8 or 
                                       ARINC_818_Rx_VSYNC_RST7 or 
                                       ARINC_818_Rx_VSYNC_RST6 or 
                                       ARINC_818_Rx_VSYNC_RST5 or 
                                       ARINC_818_Rx_VSYNC_RST4 or 
                                       ARINC_818_Rx_VSYNC_RST3 or 
                                       ARINC_818_Rx_VSYNC_RST2 or 
                                       ARINC_818_Rx_VSYNC_RST1 ; 
    end if;
end process;            


process( user_clk,user_reset )
  begin
   if ( user_reset = '1' ) then		
		current_descriptor1 	<= "000";
   elsif (rising_edge(user_clk)) then
        if(ARINC_818_Rx_VSYNC_RST1 = '1' and current_descriptor1 = 0)then
            current_descriptor1 <= current_descriptor1 + '1';
            des_addr_latch	    <= des_addr_1;
            TRANS_EN5           <= TRANS_EN1;
        elsif(ARINC_818_Rx_VSYNC_RST1 = '1' and current_descriptor1 = 1)then
            current_descriptor1 <= current_descriptor1 + '1';
            des_addr_latch	    <= des_addr_1 + x"00400000";
            TRANS_EN5           <= TRANS_EN1;
        elsif(ARINC_818_Rx_VSYNC_RST1 = '1' and current_descriptor1 = 2)then
            current_descriptor1 <= current_descriptor1 + '1';
            des_addr_latch	    <= des_addr_1 + x"00800000";
            TRANS_EN5           <= TRANS_EN1;
        elsif(ARINC_818_Rx_VSYNC_RST1 = '1' and current_descriptor1 = 3)then
            current_descriptor1 <= current_descriptor1 + '1';
            des_addr_latch	    <= des_addr_1 + x"00C00000";
            TRANS_EN5           <= TRANS_EN1;
        elsif(ARINC_818_Rx_VSYNC_RST1 = '1' and current_descriptor1 = 4)then
            current_descriptor1 <= current_descriptor1 + '1';
            des_addr_latch	    <= des_addr_1 + x"01000000";
            TRANS_EN5           <= TRANS_EN1;
        elsif(ARINC_818_Rx_VSYNC_RST1 = '1' and current_descriptor1 = 5)then
            current_descriptor1 <= current_descriptor1 + '1';
            des_addr_latch	    <= des_addr_1 + x"01400000";
            TRANS_EN5           <= TRANS_EN1;
        elsif(ARINC_818_Rx_VSYNC_RST1 = '1' and current_descriptor1 = 6)then
            current_descriptor1 <= current_descriptor1 + '1';
            des_addr_latch	    <= des_addr_1 + x"01800000";
            TRANS_EN5           <= TRANS_EN1;
        elsif(ARINC_818_Rx_VSYNC_RST1 = '1' and current_descriptor1 = 7)then
            current_descriptor1 <= current_descriptor1 + '1';
            des_addr_latch	    <= des_addr_1 + x"01C00000";
            TRANS_EN5           <= TRANS_EN1;
        elsif(inc_by_4 = '1')then
            des_addr_latch      <= des_addr_latch + x"20";
        end if;
    end if;
end process;    


process( user_clk)
begin
	if (rising_edge(user_clk)) then
        current_descriptor2 <= current_descriptor1 - "100";
    end if;
end process;    


process( user_clk)
begin
	if (rising_edge(user_clk)) then
		if (user_reset = '1')  then
			des_addr_1  <= x"90000000";
			
		elsif (LADDR1(23 downto 0) = x"200400" and LWR_int = '1') then
			des_addr_1   <= lwr_data_int1;
		elsif (LADDR1(23 downto 0) = x"200404" and LWR_int = '1') then
			des_addr_2   <= lwr_data_int1;
		elsif (LADDR1(23 downto 0) = x"200408" and LWR_int = '1') then
			des_addr_3   <= lwr_data_int1;
		elsif (LADDR1(23 downto 0) = x"20040C" and LWR_int = '1') then
			des_addr_4   <= lwr_data_int1;
		end if;
	end if;
end process;

FIFO_DMA : DMA_DATA
  PORT MAP (
    clk => user_clk,
    srst => user_reset,
    din => ff_din,
    wr_en => s_axis_tx_tvalid1,
    rd_en => ff_rd_en,
    dout => ff_dout,
    full => open,
    empty => ff_empty
  );

ff_empty_n <= not ff_empty;
ff_rd_en  <= ff_empty_n and s_axis_tx_tready ;




end behavioral;

